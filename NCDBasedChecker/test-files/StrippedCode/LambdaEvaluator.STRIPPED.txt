package evaluator . function ; import java . util . LinkedList ; import java . util . List ; import main . lisp . evaluator . Environment ; import main . lisp . evaluator . Evaluator ; import main . lisp . evaluator . function . LambdaFactory ; import main . lisp . parser . terms . IdentifierAtom ; import main . lisp . parser . terms . IdentifierAtomFactory ; import main . lisp . parser . terms . NilAtom ; import main . lisp . parser . terms . SExpression ; import main . lisp . scanner . tokens . StringToken ; import main . lisp . scanner . tokens . Token ; import main . lisp . scanner . tokens . TokenFactory ; import main . lisp . scanner . tokens . TokenType ; public class LambdaEvaluator implements Evaluator { @ Override public SExpression eval ( SExpression givenExpressionFromClient , Environment environment ) { // TODO Auto-generated method stub givenExpressionFromClient = givenExpressionFromClient . getTail ( ) ; if ( givenExpressionFromClient . getClass ( ) == NilAtom . class ) throw new IllegalStateException ( "No arguments for the following operator 'lambda'" ) ; IdentifierAtom [ ] paramsFromClient = null ; SExpression payload = givenExpressionFromClient . getTail ( ) ; SExpression procedureVars = givenExpressionFromClient . getHead ( ) ; List < SExpression > argumentsOfTheCollection = new LinkedList < > ( ) ; if ( ! ( procedureVars . getClass ( ) == NilAtom . class ) ) { argumentsOfTheCollection . add ( procedureVars . getHead ( ) ) ; while ( ! ( procedureVars . getTail ( ) . getClass ( ) == NilAtom . class ) ) { procedureVars = procedureVars . getTail ( ) ; argumentsOfTheCollection . add ( procedureVars . getHead ( ) ) ; } } paramsFromClient = new IdentifierAtom [ argumentsOfTheCollection . size ( ) ] ; TokenFactory . setTokenClass ( TokenType . STRING , StringToken . class ) ; for ( int i = 0 ; i < argumentsOfTheCollection . size ( ) ; ++ i ) { Token tokenizedVersion = TokenFactory . newInstance ( TokenType . STRING , argumentsOfTheCollection . get ( i ) . toString ( ) ) ; paramsFromClient [ i ] = IdentifierAtomFactory . newInstance ( tokenizedVersion ) ; } return LambdaFactory . newInstance ( paramsFromClient , payload ) ; } } <EOF> 